lexical RubyModule = (lexical name) {
	lexical instance_methods = $BasicHash($prime_gen)
	lexical constants = $BasicHash($prime_gen)
	lexical included = []
	lexical inner_obj = $RubyObject($Module)

	lexical self = (&msg) -> return {
		local msg_name
		local is_c9
		bytecode(msg) {
			message_name
			dup_top
			local_set "msg_name"
			push "__c9_"
			message_new "match" 0 1
			channel_call
			pop
			is 5
			local_set "is_c9"
		}
		if (is_c9) {
			switch (msg_name)
			case ('__c9_lookup__') {
				local meth_name = bytecode(msg) {
					message_unpack 1 0 0
					swap
					pop
				}
				
				local meth = instance_methods.get(meth_name)
				if (meth) {
					return <- [meth,nil]
				} else {
					return <- nil
				}
			} case ('__c9_name__') {
				return <- name
			} case ('__c9_add_constant__') {
				local const_name
				local const_val
				bytecode(msg) {
					message_unpack 2 0 0
					local_set "const_name"
					local_set "const_val"
				}
				return <- constants.set(const_name, const_val)
			} case ('__c9_get_constant__') {
				local const_name = bytecode(msg) {
					message_unpack 1 0 0
					swap
					pop
				}
				return <- constants.get(const_name)
			} case ('__c9_get_constant_scoped__') {
				local const_name
				local next
				local next_mod
				local next_scope
				bytecode(msg) {
					message_unpack 2 0 0
					local_set "const_name"
					local_set "next"
				}
				if (next) {
					bytecode(next) {
						tuple_unpack 2 0 0
						local_set "next_mod"
						local_set "next_scope"
					}
				}
				local const = constants.get(const_name)
				if (const) {
					return <- const
				} else if (next) {
					return <- next_mod.__c9_get_constant_scoped__(const_name, next_scope)
				}
				return <- nil
			} case ('__c9_add_method__') {
				local meth_name
				local meth
				bytecode(msg) {
					message_unpack 2 0 0
					local_set "meth_name"
					local_set "meth"
				}
				return <- instance_methods.set(meth_name, meth)
			} case ('__c9_alias_method__') {
				local new_name
				local old_name
				bytecode(msg) {
					message_unpack 2 0 0
					local_set "new_name"
					local_set "old_name"
				}
				local old_meth = self.__c9_lookup__(old_name)
				if (old_meth) {
					return <- instance_methods.set(new_name, old_meth.at(0))
				} else {
					return <- nil
				}
			} case ("__c9_scope_name__") {
				if (self == $Object) {
					return <- ""
				} else {
					return <- name + "::"
				}
			}
		}
		return <- msg -> inner_obj
	}
	inner_obj.__c9_wrap__(self)
	self
}

$Class.__c9_rebind_super__($Module)
$set_special_channel('RubyModule', RubyModule)