var RubyModule = (name) {
	var instance_methods = $BasicHash($prime_gen)
	var constants = $BasicHash($prime_gen)
	var included = []
	var inner_obj = $RubyObject($Module)

	var self = (&msg) -> return {
		var name
		var is_c9
		bytecode(msg) {
			message_name
			dup_top
			local_set 0 "name"
			push "__c9_"
			message_new "match" 0 1
			channel_call
			pop
			is 5
			local_set 0 "is_c9"
		}
		if (is_c9) {
			switch (name)
			case ('__c9_lookup__') {
				var meth_name = bytecode(msg) {
					message_unpack 1 0 0
					swap
					pop
				}
				
				var meth = instance_methods.get(meth_name)
				if (meth) {
					return <- [meth,nil]
				} else {
					return <- nil
				}
			} case ('__c9_name__') {
				return <- name
			} case ('__c9_add_constant__') {
				var const_name
				var const_val
				bytecode(msg) {
					message_unpack 2 0 0
					local_set 0 "const_name"
					local_set 0 "const_val"
				}
				return <- constants.set(const_name, const_val)
			} case ('__c9_get_constant__') {
				var const_name = bytecode(msg) {
					message_unpack 1 0 0
					swap
					pop
				}
				return <- constants.get(const_name)
			} case ('__c9_get_constant_scoped__') {
				var const_name
				var next
				var next_mod
				var next_scope
				bytecode(msg) {
					message_unpack 2 0 0
					local_set 0 "const_name"
					local_set 0 "next"
				}
				if (next) {
					bytecode(next) {
						tuple_unpack 2 0 0
						local_set 0 "next_mod"
						local_set 0 "next_scope"
					}
				}
				var const = constants.get(const_name)
				if (const) {
					return <- const
				} else if (next) {
					return <- next_mod.__c9_get_constant_scoped__(const_name, next_scope)
				}
				return <- nil
			} case ('__c9_add_method__') {
				var meth_name
				var meth
				bytecode(msg) {
					message_unpack 2 0 0
					local_set 0 "meth_name"
					local_set 0 "meth"
				}
				return <- instance_methods.set(meth_name, meth)
			} case ('__c9_alias_method__') {
				var new_name
				var old_name
				bytecode(msg) {
					message_unpack 2 0 0
					local_set 0 "new_name"
					local_set 0 "old_name"
				}
				var old_meth = self.__c9_lookup__(old_name)
				if (old_meth) {
					return <- instance_methods.set(new_name, old_meth.at(1))
				} else {
					return <- nil
				}
			} case ("__c9_scope_name__") {
				if (self == $Object) {
					return <- ""
				} else {
					return <- name + "::"
				}
			}
		}
		return <- msg -> inner_obj
	}
	inner_obj.__c9_wrap__(self)
	self
}

$Class.__c9_rebind_super__($Module)
$set_special_channel('RubyModule', RubyModule)